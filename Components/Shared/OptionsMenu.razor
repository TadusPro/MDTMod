@using MDTadusMod.Data
@using MDTadusMod.Services
@inject SettingsService SettingsManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="nav-item options-menu" @ref="optionsMenuElement" @onmouseenter="AdjustDropdownPosition">
    <span>Options</span>
    <div class="options-dropdown">
        @if (SettingsManager.GlobalOptions != null)
        {
            var viewOptions = SettingsManager.GlobalOptions;
            var showExtendedDisplay = SettingsManager.GlobalSettings.ShowExtendedItemContainerDisplay;

            <div class="option-item">
                <input type="checkbox" id="email"
                       checked="@viewOptions.Email"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Email), e.Value)" />
                <label for="email">Email</label>
            </div>
            <div class="option-item">
                <input type="checkbox" id="ign"
                       checked="@viewOptions.IGN"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.IGN), e.Value)" />
                <label for="ign">IGN</label>
            </div>
            <div class="option-item">
                <input type="checkbox" id="info"
                       checked="@viewOptions.Info"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Info), e.Value)" />
                <label for="info">Info</label>
            </div>

            <!-- Characters Section -->
            <div class="option-item">
                <input type="checkbox" id="characters"
                       checked="@viewOptions.Characters"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Characters), e.Value)" />
                <label for="characters">Characters</label>
            </div>
            @if (viewOptions.Characters)
            {
                <div class="radio-group">
                    <!-- CharOrder Dropdown -->
                    <div class="option-item">
                        <label for="charOrder">Order by</label>
                        <select id="charOrder"
                                @onchange="(e) => UpdateOption(nameof(viewOptions.CharOrder), Enum.Parse(typeof(CharOrder), e.Value.ToString()))">
                            @foreach (CharOrder order in Enum.GetValues(typeof(CharOrder)))
                            {
                                <option value="@order" selected="@(viewOptions.CharOrder == order)">@order</option>
                            }
                        </select>
                    </div>

                    <!-- CharRowLength Number Input -->
                    <div class="option-item">
                        <label for="charRowLength">Rowlength</label>
                        <input type="number" id="charRowLength"
                               min="1" max="40"
                               value="@viewOptions.CharRowLength"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.CharRowLength), e.Value.ToString())"
                               style="width: 50px;" />
                    </div>

                    <!-- Other Checkboxes -->
                    <div class="option-item">
                        <input type="checkbox" id="charDescription"
                               checked="@viewOptions.CharDescription"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.CharDescription), e.Value)" />
                        <label for="charDescription">Desc</label>
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="equipment"
                               checked="@viewOptions.Equipment"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.Equipment), e.Value)" />
                        <label for="equipment">Equipment</label>
                        @if (viewOptions.Equipment && showExtendedDisplay)
                        {
                            <select id="equipmentDisplay"
                                    @onchange="(e) => UpdateOption(nameof(viewOptions.EquipmentDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                                @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                                {
                                    <option value="@type" selected="@(viewOptions.EquipmentDisplayType == type)">@type</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="inventory"
                               checked="@viewOptions.Inventory"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.Inventory), e.Value)" />
                        <label for="inventory">Inventory</label>
                        @if (viewOptions.Inventory && showExtendedDisplay)
                        {
                            <select id="inventoryDisplay"
                                    @onchange="(e) => UpdateOption(nameof(viewOptions.InventoryDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                                @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                                {
                                    <option value="@type" selected="@(viewOptions.InventoryDisplayType == type)">@type</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="quickslots"
                               checked="@viewOptions.Quickslots"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.Quickslots), e.Value)" />
                        <label for="quickslots">Quickslots</label>
                        @if (viewOptions.Quickslots && showExtendedDisplay)
                        {
                            <select id="quickslotsDisplay"
                                    @onchange="(e) => UpdateOption(nameof(viewOptions.QuickslotsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                                @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                                {
                                    <option value="@type" selected="@(viewOptions.QuickslotsDisplayType == type)">@type</option>
                                }
                            </select>
                        }
                    </div>

                    <!-- Stats Section -->
                    <div class="option-item">
                        <input type="checkbox" id="stats"
                               checked="@viewOptions.Stats"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.Stats), e.Value)" />
                        <label for="stats">Show Stats</label>
                    </div>
                    @if (viewOptions.Stats)
                    {
                        <div class="radio-group">
                            <div class="option-item">
                                <input type="checkbox" id="exalts"
                                       checked="@viewOptions.Exalts"
                                       @onchange="(e) => UpdateOption(nameof(viewOptions.Exalts), e.Value)" />
                                <label for="exalts">Exalts</label>
                            </div>
                            <!-- StatsOrder Dropdown -->
                            <div class="option-item">
                                <label for="statsOrder">Stats Order</label>
                                <select id="statsOrder"
                                        @onchange="(e) => UpdateOption(nameof(viewOptions.StatsOrder), Enum.Parse(typeof(StatsOrder), e.Value.ToString()))">
                                    @foreach (StatsOrder order in Enum.GetValues(typeof(StatsOrder)))
                                    {
                                        <option value="@order" selected="@(viewOptions.StatsOrder == order)">@order</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <div class="option-item">
                        <input type="checkbox" id="additionalStats"
                               checked="@viewOptions.AdditionalStats"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.AdditionalStats), e.Value)" />
                        <label for="additionalStats">Additional Stats</label>
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="additionalGoals"
                               checked="@viewOptions.AdditionalGoals"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.AdditionalGoals), e.Value)" />
                        <label for="additionalGoals">Goals</label>
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="additionalBonuses"
                               checked="@viewOptions.AdditionalBonuses"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.AdditionalBonuses), e.Value)" />
                        <label for="additionalBonuses">Bonuses</label>
                    </div>
                </div>
            }

            <!-- Pet Section -->
            <div class="option-item">
                <input type="checkbox" id="pet"
                       checked="@viewOptions.Pet"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Pet), e.Value)" />
                <label for="pet">Pets</label>
            </div>
            @if (viewOptions.Pet)
            {
                <div class="radio-group">
                    <div class="option-item">
                        <input type="checkbox" id="petDescription"
                               checked="@viewOptions.PetDescription"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.PetDescription), e.Value)" />
                        <label for="petDescription">Pet Description</label>
                    </div>
                    <div class="option-item">
                        <input type="checkbox" id="petInventory"
                               checked="@viewOptions.PetInventory"
                               @onchange="(e) => UpdateOption(nameof(viewOptions.PetInventory), e.Value)" />
                        <label for="petInventory">Pet Inventory</label>
                        @if (viewOptions.PetInventory && showExtendedDisplay)
                        {
                            <select id="petInventoryDisplay"
                                    @onchange="(e) => UpdateOption(nameof(viewOptions.PetInventoryDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                                @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                                {
                                    <option value="@type" selected="@(viewOptions.PetInventoryDisplayType == type)">@type</option>
                                }
                            </select>
                        }
                    </div>
                </div>
            }

            <!-- Other Global Options -->
            <div class="option-item">
                <input type="checkbox" id="vaults"
                       checked="@viewOptions.Vaults"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Vaults), e.Value)" />
                <label for="vaults">Vaults</label>
                @if (viewOptions.Vaults && showExtendedDisplay)
                {
                    <select id="vaultsDisplay"
                            @onchange="(e) => UpdateOption(nameof(viewOptions.VaultsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                        @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                        {
                            <option value="@type" selected="@(viewOptions.VaultsDisplayType == type)">@type</option>
                        }
                    </select>
                }
            </div>
            <div class="option-item">
                <input type="checkbox" id="potions"
                       checked="@viewOptions.Potions"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Potions), e.Value)" />
                <label for="potions">Potions</label>
                @if (viewOptions.Potions && showExtendedDisplay)
                {
                    <select id="potionsDisplay"
                            @onchange="(e) => UpdateOption(nameof(viewOptions.PotionsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                        @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                        {
                            <option value="@type" selected="@(viewOptions.PotionsDisplayType == type)">@type</option>
                        }
                    </select>
                }
            </div>
            <div class="option-item">
                <input type="checkbox" id="materials"
                       checked="@viewOptions.Materials"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Materials), e.Value)" />
                <label for="materials">Materials</label>
                @if (viewOptions.Materials && showExtendedDisplay)
                {
                    <select id="materialsDisplay"
                            @onchange="(e) => UpdateOption(nameof(viewOptions.MaterialsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                        @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                        {
                            <option value="@type" selected="@(viewOptions.MaterialsDisplayType == type)">@type</option>
                        }
                    </select>
                }
            </div>
            <div class="option-item">
                <input type="checkbox" id="spoils"
                       checked="@viewOptions.Spoils"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Spoils), e.Value)" />
                <label for="spoils">Spoils</label>
                @if (viewOptions.Spoils && showExtendedDisplay)
                {
                    <select id="spoilsDisplay"
                            @onchange="(e) => UpdateOption(nameof(viewOptions.SpoilsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                        @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                        {
                            <option value="@type" selected="@(viewOptions.SpoilsDisplayType == type)">@type</option>
                        }
                    </select>
                }
            </div>
            <div class="option-item">
                <input type="checkbox" id="gifts"
                       checked="@viewOptions.Gifts"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Gifts), e.Value)" />
                <label for="gifts">Gifts</label>
                @if (viewOptions.Gifts && showExtendedDisplay)
                {
                    <select id="giftsDisplay"
                            @onchange="(e) => UpdateOption(nameof(viewOptions.GiftsDisplayType), Enum.Parse(typeof(ContainerDisplayType), e.Value.ToString()))">
                        @foreach (ContainerDisplayType type in Enum.GetValues(typeof(ContainerDisplayType)))
                        {
                            <option value="@type" selected="@(viewOptions.GiftsDisplayType == type)">@type</option>
                        }
                    </select>
                }
            </div>

            <div class="option-item">
                <input type="checkbox" id="shrink"
                       checked="@viewOptions.Shrink"
                       @onchange="(e) => UpdateOption(nameof(viewOptions.Shrink), e.Value)" />
                <label for="shrink">Shrink</label>
            </div>
        }
    </div>
</div>

@code {
    private ElementReference optionsMenuElement;

    protected override void OnInitialized()
    {
        // Subscribe to the OnChange event so the UI re-renders when settings change
        SettingsManager.OnChange += StateHasChanged;
    }

    private async Task AdjustDropdownPosition()
    {
        await JSRuntime.InvokeVoidAsync("adjustDropdown", optionsMenuElement);
    }

    private void UpdateOption(string propertyName, object value)
    {
        var propertyInfo = typeof(AccountViewOptions).GetProperty(propertyName);
        if (propertyInfo == null) return;

        object parsedValue;
        if (propertyInfo.PropertyType == typeof(bool) && value is bool boolValue)
        {
            parsedValue = boolValue;
        }
        else if (propertyInfo.PropertyType == typeof(int) && int.TryParse(value.ToString(), out int intValue))
        {
            parsedValue = intValue;
        }
        else if (propertyInfo.PropertyType.IsEnum)
        {
            parsedValue = Enum.Parse(propertyInfo.PropertyType, value.ToString());
        }
        else
        {
            // Skip update if parsing fails or type is unhandled
            return;
        }

        SettingsManager.UpdateGlobalOption(propertyName, parsedValue);
    }

    public void Dispose()
    {
        // Unsubscribe from the event to prevent memory leaks
        SettingsManager.OnChange -= StateHasChanged;
    }
}