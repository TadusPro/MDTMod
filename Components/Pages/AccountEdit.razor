@page "/account/edit/{Id:guid}"
@page "/account/new"
@inject Services.AccountService AccountSvc
@inject NavigationManager NavManager

<EditForm Model="@account" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            @if (!IsNew)
            {
                <span class="h5">Stars: @(accountData?.Fame ?? 0)</span>
            }
        </div>
        <div class="text-center">
            <h3 class="mb-0">@(IsNew ? "Create Account" : account.Email)</h3>
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            @if (!IsNew)
            {
                <button type="button" class="btn btn-light" @onclick="MoveUp" disabled="@(isFirstAccount)">Up</button>
                <button type="button" class="btn btn-light" @onclick="MoveDown" disabled="@(isLastAccount)">Down</button>
                <button type="button" class="btn btn-danger" @onclick="Remove">Remove</button>
            }
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </div>

    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText id="email" @bind-Value="account.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" @bind-Value="account.Password" class="form-control" type="password" />
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private MDTadusMod.Data.Account account = new();
    private MDTadusMod.Data.AccountData accountData;
    private bool IsNew => Id == Guid.Empty;

    private List<MDTadusMod.Data.Account> allAccounts;
    private bool isFirstAccount = true;
    private bool isLastAccount = true;

    protected override async Task OnParametersSetAsync()
    {
        if (!IsNew)
        {
            allAccounts = await AccountSvc.GetAccountsAsync();
            account = allAccounts.FirstOrDefault(a => a.Id == Id);
            if (account != null)
            {
                accountData = await AccountSvc.GetAccountDataAsync(account.Id);
                UpdateAccountPosition();
            }
        }
    }

    private void UpdateAccountPosition()
    {
        if (allAccounts == null || account == null) return;
        var index = allAccounts.IndexOf(account);
        isFirstAccount = index <= 0;
        isLastAccount = index == -1 || index == allAccounts.Count - 1;
    }

    private async Task MoveUp()
    {
        var index = allAccounts.IndexOf(account);
        if (index > 0)
        {
            (allAccounts[index], allAccounts[index - 1]) = (allAccounts[index - 1], allAccounts[index]);
            await AccountSvc.SaveAccountsAsync(allAccounts);
            UpdateAccountPosition();
        }
    }

    private async Task MoveDown()
    {
        var index = allAccounts.IndexOf(account);
        if (index > -1 && index < allAccounts.Count - 1)
        {
            (allAccounts[index], allAccounts[index + 1]) = (allAccounts[index + 1], allAccounts[index]);
            await AccountSvc.SaveAccountsAsync(allAccounts);
            UpdateAccountPosition();
        }
    }

    private async Task HandleValidSubmit()
    {
        var accounts = await AccountSvc.GetAccountsAsync();
        if (IsNew)
        {
            account.Id = Guid.NewGuid();
            accounts.Add(account);
        }
        else
        {
            var existingAccount = accounts.FirstOrDefault(a => a.Id == account.Id);
            if (existingAccount != null)
            {
                existingAccount.Email = account.Email;
                existingAccount.Password = account.Password;
            }
        }

        await AccountSvc.SaveAccountsAsync(accounts);
        NavManager.NavigateTo("/view-accounts");
    }

    private async Task Remove()
    {
        var accounts = await AccountSvc.GetAccountsAsync();
        var accountToRemove = accounts.FirstOrDefault(a => a.Id == Id);
        if (accountToRemove != null)
        {
            accounts.Remove(accountToRemove);
            await AccountSvc.SaveAccountsAsync(accounts);
        }
        NavManager.NavigateTo("/view-accounts");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/view-accounts");
    }
}