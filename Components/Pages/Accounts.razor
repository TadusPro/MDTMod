@page "/accounts"
@inject Services.AccountService AccountSvc
@inject NavigationManager Navigation

<h1>Accounts</h1>

<p>
    <a href="/account/new" class="btn btn-primary">Create New Account</a>
</p>

@if (accounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Order</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td>@account.Email</td>
                    <td>
                        <button class="btn btn-light" @onclick="() => MoveUp(account)" disabled="@(accounts.IndexOf(account) == 0)">Up</button>
                        <button class="btn btn-light" @onclick="() => MoveDown(account)" disabled="@(accounts.IndexOf(account) == accounts.Count - 1)">Down</button>
                    </td>
                    <td>
                        <a href="@($"/account/edit/{account.Id}")" class="btn btn-secondary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MDTadusMod.Data.Account> accounts;

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountSvc.GetAccountsAsync();
    }

    private async Task MoveUp(MDTadusMod.Data.Account account)
    {
        var index = accounts.IndexOf(account);
        if (index > 0)
        {
            (accounts[index], accounts[index - 1]) = (accounts[index - 1], accounts[index]);
            await AccountSvc.SaveAccountsAsync(accounts);
        }
    }

    private async Task MoveDown(MDTadusMod.Data.Account account)
    {
        var index = accounts.IndexOf(account);
        if (index > -1 && index < accounts.Count - 1)
        {
            (accounts[index], accounts[index + 1]) = (accounts[index + 1], accounts[index]);
            await AccountSvc.SaveAccountsAsync(accounts);
        }
    }
}